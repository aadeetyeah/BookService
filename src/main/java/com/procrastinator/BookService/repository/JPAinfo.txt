package com.procrastinator.BookService.repository;

import com.procrastinator.BookService.models.Book;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;

/* GENERIC TYPEs
* 1. Book==> which table we are going to store
* 2. Integer==> primary key of the book table/class */

public interface BookRepository extends JpaRepository<Book,Integer> {
/*
    JpaRepository interface is present in Spring data jpa dependency
* It contains all relevant methods which we need for querying on DB. */

    /* Spring-data-JPA gives us an abstraction to define any query over a function
    * By using @Query Annotation.
    * So whenever the Custom function is invoked the function return the output of the query
    * written in @Query Annotation. */

    //@Query("select * from Book b where b.authorName= :?1")
    // ?1 --> refers to first parameter/argument of a function.
    // ?2 --> refers to second argument of function if function has 2 parameters.

        //In the below query we have written authorName(Java class attribute) and not author_name(Column in SQL table)
    //because Hibernate converts authorName(of Java class) to author_name(of SQL table)
    //@Entity Annotation when given to a Java class it maps Java class to SQL table. (Done by Hibernate)

        //@Query("select * from books_table where author_name=?1,nativeQuery=true") // Parameter Index
        //@Query("select * from books_table where author_name=:author_name //Colon operator/Parameter Name

        @Query(value = "select * from books_table b where b.author_name= :author_name",nativeQuery = true) //native SQL Format
         List<Book> findBooksByAuthorName(String author_name);

        @Query("select b from Book b where b.cost< ?1") //parameter index
        List<Book> findBooksLessThanByCost(int cost);


         //There are 2 ways to write SQL queries in @Query Annotation.
    /* 1. JPQL- Java Persistence Query Language
           In JPQL we consider our Java class and not the corresponding MySQL table
           in our Case Book class in JAVA has books_table in MySQL.

           But in JPQL we consider java class for they query.
           Java class is mapped to SQL table.
           When we write JPQL queries we are concerned about Java class and not about SQL table
           SO when we write query we write in the format which is understood by Java Program.

    *  2. Native SQL ==> Our std SQL queries
        Here we refer the table present in SQL DB and not the Java class name.

        @Query Annotation has one parameter called nativeQuery=false;
        by default it is false as we are using JPQL
        but if we want to use Native SQL then it should be -- nativeQuery=true;

        */
}


//There are 2 types of functions/API.
1. Safe --> which is not changing any data/state of data in DB
2. UnSafe  --> which is changing data in DB.

All the unsafe methods need to have @Transactional Annotation.
So that if any unsafe operation is being executed and if it fails it will not change
the state of data in DB. Recall the property of Atomicity.
Either the whole TRX takes place or none of it.
Half TRX/operation cannot take place.

All the functions which are updating the state of DB will definitely be @Transactional.

Check SimpleJPARepository class to view the function's body like save/delete/update etc.
Check if they have @Transactional Annotation.

Whenever we write @Transactional this will acquire a lock on particular section of table
where we are performing any operation.
By Locking means other operations/objects may not able to access that table.


When our code is compiled , Hibernate tries to PARSE all th @Query Annotation
But only JPQL queries i.e. (nativeQuery=false)

If nativeQuery=true Hibernate doesn't parse the queries
It directly passes the query to DB Layer.

All the queries which are not native Hibernate will Parse at the beginning itself.
ANd if there is any issue it will give us the error as "Failed to create a bean of our CustomRepository."
Custom means name of our Repository in this case BookRepository


JPQL v Native SQL (If there is any error in the Query provided).
1.If there is any error in NATIVE SQL Query we will not get any error
until we invoke the API(method) we created.  --> RUNTIME

2.If there is any error in JPQL Query it will not compile.
It directly will give us Error while compiling. -->COMPILE-TIME